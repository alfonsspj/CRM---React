
Routing

con una libreria de routing puedes tener diferentes urls y mostrar diferentes componentes, asi 
como restringir acceso a ciertas paginas

un proyecto grande es mejor manejarlo en multiples pantallas, en lugar de un solo componente que revise multiples condiciones

librerias
- react router
- react location       ->creador de react query

ambos incorporan su propia libreria
- gatsby
- next.js 

instalacion
npm i react-router-dom

primero BrowserRouter para decirle que queremos crear un nuevo routing o queremos registrar diferentes endpoints y que cargue ciertos componentes. Ese es el componente principal

todas nuestras rutas van a estar dentro de este componente Routes

cada un de las rutas va a utilizar el componente route

<Route>          ----- lo va a detectar como un grupo de rutas anidadas 
    <Route />      --- una sola ruta ---
    <Route />     
</Route>



librerias para formularios
-- si tu proyecto contará con formularios muy grandes, complejos o multiples formularios; una libreria solucionara muchos problemas

-- algunas librerias cuentan con validaciones muy robustas y otras se integran bien con alguna dependencia de validacion

opciones
- Formik    usa Yup con herramientas de validacion
- react Hook form


REST api
- rest = representational state transfer 

puede ser diseñada en cualquier lenguaje

debe responder a los request HTTP: GET, POST, PUT, PATCH, DELETE

tiene una forma ordenada y estructurada de poner a disposicion los recursos

get = obtener

post = enviar datos al servidor / creacion

put/patch = actualizar 
delete = eliminar

endpoints de una rest api

una rest api cune con endpoints(o urls) para hacer operaciones crud 

- listar todos los clientes get /clientes

- obtener un solo cliente Get /clientes/id   

- crear un nuevo cliente post /clientes 

- editar un cliente  put /clientes/id

- borrar un cliente  delete /clientes/id

usar JSON Server para crear la rest api

ejecutar para que corra en el puerto 4000
json-server --watch db.json --port 4000


instalacion de forma global
npm install -g json-server


--- json server no posee seguridad --- solo es para practicar


ejecutar en la consola
json-server --watch db.json --port 4000


try catch -- en java consume muchos recursos -- no es asi en js

en una excelente forma de debugear un llamado hacia un api, cuando vas a crear un nuevo registro, porque te va a decir que la url no esta disponible, que el servidor esta caido, etc



operador NULLISH COALESCING OPERATOR(??)
nombre: cliente?.nombre ?? "",
si cliente?.nombre es undefined marca(ejecuta) ""
tambien es una forma de comprobar que un objeto tenga propiedades

como ternario seria:
nombre: cliente.nombre ? cliente.nombre : "",













